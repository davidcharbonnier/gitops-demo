apiVersion: v1
kind: Namespace
metadata:
  name: gogs
---
# Source: gogs/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gogs-postgresql
  namespace: gogs
  labels:
    app: gogs-postgresql
    chart: "postgresql-0.6.0"
    release: "gogs"
    heritage: "Helm"
type: Opaque
data:
  
  postgres-password:  "Z29ncw=="
---
# Source: gogs/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gogs-gogs
  namespace: gogs
  labels:
    app: gogs-gogs
    chart: "gogs-0.7.11"
    release: "gogs"
    heritage: "Helm"
type: Opaque
data:
  postgresql-user: "Z29ncw=="
---
# Source: gogs/templates/configmap-tcp.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    app: gogs-gogs-tcp
    chart: "gogs-0.7.11"
    component: gogs
    heritage: "Helm"
    release: "gogs"
  name: tcp-gogs-gogs-ssh
  namespace: gogs
data:
  2222: default/gogs-gogs:ssh
---
# Source: gogs/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    app: gogs-gogs-config
    chart: "gogs-0.7.11"
    component: gogs
    heritage: Helm
    release: gogs
  name: gogs-gogs-config
  namespace: gogs
data:
  app.ini: |-
    APP_NAME = Gogs
    RUN_MODE = prod

    [repository.upload]
    ENABLED = true
    ALLOWED_TYPES = 
    MAX_FILE_SIZE = 3
    MAX_FILES = 5

    [server]
    PROTOCOL = http
    DOMAIN = gogs.example.com
    ROOT_URL = http://gogs.example.com/
    LANDING_PAGE = home
    SSH_DOMAIN = localhost
    SSH_PORT = 22
    SSH_LISTEN_PORT = 22

    [service]
    ENABLE_CAPTCHA = true
    ACTIVE_CODE_LIVE_MINUTES = 180
    RESET_PASSWD_CODE_LIVE_MINUTES = 180
    REGISTER_EMAIL_CONFIRM = false
    DISABLE_REGISTRATION = false
    REQUIRE_SIGNIN_VIEW = false
    ENABLE_NOTIFY_MAIL = false
    ENABLE_REVERSE_PROXY_AUTHENTICATION = false
    ENABLE_REVERSE_PROXY_AUTO_REGISTRATION = false

    [mailer]
    ENABLED = false
    HOST = 
    DISABLE_HELO = false
    HELO_HOSTNAME =
    SKIP_VERIFY = false
    SUBJECT_PREFIX = 
    FROM = 
    USER = 
    PASSWD = 
    USE_PLAIN_TEXT = text/plain

    [database]
    DB_TYPE = "postgres"
    HOST = gogs-postgresql
    NAME = "gogs"
    USER = "gogs"
    PASSWD = "gogs"
    SSL_MODE = "disable"

    [security]
    INSTALL_LOCK = true
    SECRET_KEY = "Y2hhbmdlbWU="

    [ui]
    EXPLORE_PAGING_NUM = 20
    ISSUE_PAGING_NUM = 10
    FEED_MAX_COMMIT_NUM = 5

    [cache]
    ADAPTER = memory
    INTERVAL = 60
    HOST = 

    [webhook]
    QUEUE_LENGTH = 1000
    DELIVER_TIMEOUT = 5
    SKIP_TLS_VERIFY = true
    PAGING_NUM = 10

    [log]
    MODE = console
    LEVEL = Trace

    [cron]
    ENABLED = true
    RUN_AT_START = false

    [cron.update_mirrors]
    SCHEDULE = @every 10m

    [cron.repo_health_check]
    SCHEDULE = @every 24h
    TIMEOUT = 60s
    ARGS = 

    [cron.check_repo_stats]
    RUN_AT_START = true
    SCHEDULE = @every 24h

    [cron.repo_archive_cleanup]
    RUN_AT_START = false
    SCHEDULE = @every 24h
    OLDER_THAN = 24h

    [other]
    SHOW_FOOTER_BRANDING = false
    SHOW_FOOTER_VERSION = true
    SHOW_FOOTER_TEMPLATE_LOAD_TIME = true
---
# Source: gogs/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gogs-postgresql
  namespace: gogs
  labels:
    app: gogs-postgresql
    chart: "postgresql-0.6.0"
    release: "gogs"
    heritage: "Helm"
spec:
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: gogs-postgresql
---
# Source: gogs/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gogs-gogs
  namespace: gogs
  labels:
    chart: "gogs-0.7.11"
spec:
  ports:
  - port: 8080
    targetPort: 3000
    name: gogs-http
  - port: 2222
    targetPort: 22
    name: gogs-ssh
  selector:
    app: gogs-gogs
---
# Source: gogs/charts/postgresql/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gogs-postgresql
  namespace: gogs
  labels:
    app: gogs-postgresql
    chart: "postgresql-0.6.0"
    release: "gogs"
    heritage: "Helm"
spec:
  selector:
    matchLabels:
      app: gogs-postgresql
  template:
    metadata:
      labels:
        app: gogs-postgresql
    spec:
      containers:
      - name: gogs-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        env:
        - name: POSTGRES_USER
          value: "gogs"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "gogs"
        - name: POSTGRES_DB
          value: "gogs"
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: gogs-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        emptyDir: {}
---
# Source: gogs/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gogs-gogs
  namespace: gogs
  labels:
    chart: "gogs-0.7.11"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: gogs-gogs
  template:
    metadata:
      labels:
        app: gogs-gogs
    spec:
      containers:
        - name: gogs
          #image: "gogs/gogs:0.11.86"
          image: "gogs/gogs:0.11.91"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
            - containerPort: 22
          livenessProbe:
            initialDelaySeconds: 180
            httpGet:
              path: /
              port: 3000
          readinessProbe:
            initialDelaySeconds: 180
            httpGet:
              path: /
              port: 3000
          env:
            # https://github.com/gogits/gogs/tree/master/docker#container-options
            - name: SOCAT_LINK
              value: "false"
          resources:
            null
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /data/gogs/conf/app.ini
              subPath: app.ini
      volumes:
        - name: config
          configMap:
            name: gogs-gogs-config
        - name: data
          emptyDir: {}
